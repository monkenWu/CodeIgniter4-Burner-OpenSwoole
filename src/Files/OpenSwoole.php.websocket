<?php

namespace Config;

use CodeIgniter\Config\BaseConfig;
use Monken\CIBurner\OpenSwoole\Worker;
use OpenSwoole\Http\Request;
use OpenSwoole\Http\Response;
use OpenSwoole\WebSocket\Frame;
use OpenSwoole\WebSocket\Server;

class OpenSwoole extends BaseConfig
{
    /**
     * Swoole Http Driver.
     * You can use OpenSwoole\Http\Server or OpenSwoole\WebSocket\Server .
     *
     * @var string
     */
    public $httpDriver = Server::class;

    /**
     * TCP HTTP service listening ip
     *
     * @var string
     */
    public $listeningIp = '0.0.0.0';

    /**
     * TCP HTTP service listening port
     *
     * @var int
     */
    public $listeningPort = 8080;

    /**
     * Which mode to start the server in SWOOLE_PROCESS or SWOOLE_BASE
     *
     * @var int
     *
     * @see https://openswoole.com/docs/modules/swoole-server-construct
     */
    public $mode = SWOOLE_PROCESS;

    /**
     * The socket type of the server.
     *
     * @var int
     *
     * @see https://openswoole.com/docs/modules/swoole-server-construct
     */
    public $type = SWOOLE_SOCK_TCP;

    /**
     * Swoole Setting Configuration Options
     *
     * @var array
     *
     * @see https://openswoole.com/docs/modules/swoole-http-server/configuration
     * @see https://openswoole.com/docs/modules/swoole-server/configuration
     */
    public $config = [
        'worker_num'            => 1,
        'daemonize'             => false,
        'max_request'           => 0,
        'document_root'         => '{{static_path}}',
        'enable_static_handler' => true,
        'log_level'             => 0,
        'log_file'              => '{{log_path}}',
    ];
    
    /**
     * Whether to open the Key/Value Cache provided by Burner.
     * Shared high-speed caching with Swoole-Table implementation.
     * 
     * @var boolean
     */
    public $fastCache = false;

    /**
     * Buerner Swoole-Table Driver Settings
     * 
     * @var string[]
     */
    public $fastCacheConfig = [
        //Number of rows of the burner cache table
        'tableSize' => 4096,   
        //Key/value key Maximum length of string
        'keyLength' => 1024,
        //The maximum length of the key/value (if the save type is object, array, string).
        'valueStringLength' => 1024
    ];

    /**
     * Auto-scan changed files
     *
     * @var bool
     */
    public $autoReload = false;

    /**
     * Auto Reload Mode
     *
     * @var string restart or reload
     */
    public $autoReloadMode = 'restart';

    /**
     * Auto-scan of the root directory
     *
     * @var string
     */
    public $autoReloadDir = '{{reload_path}}';

    /**
     * Files with these filename-extension will be auto-scanned.
     *
     * @var array
     */
    public $autoReloadScanExtensions = ['php', 'env'];

    /**
     * The Swoole-Start event is registered by Burner.
     * If you need to use the Start event, please declare it in this method.
     *
     * @param Server $server
     * @return void
     */
    public function serverStart(Server $server){

    }

    /**
     * You can declare some additional server setting in this method.
     *
     * @return void
     */
    public function server(Server $server)
    {
        //Please do not register the 'start' event repeatedly.

        $server->on('open', static function (Server $server, Request $request) {
            Worker::setWebsocket($request);
            Worker::push(
                data: 'hi! It\'s Burner Websocket!',
                fd: $request->fd
            );
        });

        $server->on('message', static function (Server $server, Frame $frame) {
            // Burner handles CodeIgniter4 entry points.
            Worker::websocketProcesser($frame);
        });

        $server->on('request', static function (Request $swooleRequest, Response $swooleResponse) {
            // Burner handles CodeIgniter4 entry points.
            Worker::httpProcesser($swooleRequest, $swooleResponse);
        });

        $server->on('close', static function (Server $server, int $fd) {
            Worker::unsetWebsocket($fd);
            fwrite(STDOUT, sprintf(
                "client-%d is closed\n",
                $fd,
            ));
        });
    }
}
